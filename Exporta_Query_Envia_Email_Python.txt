import pandas as pd
import psycopg2
import yagmail
import schedule
import time
from datetime import datetime

# Configura√ß√µes de banco -- Insira as credenciais Do Seu Banco de Dados
DB_HOST = ''
DB_PORT = ''
DB_NAME = ''
DB_USER = ''
DB_PASS = ''

# Configura√ß√µes de e-mail -- Insira seu e-mail e o Destinat√°rio
EMAIL_FROM = ''
EMAIL_TO = ['']
EMAIL_BODY = 'Segue a base atualizada.'
EMAIL_APP_PASSWORD = ''  # senha de app do Gmail, sem espa√ßos - Gere uma senha aleat√≥ria no seu Gmail para aplicativos terceiros

# Query SQL
SQL_QUERY = """ --- INSIRA SUA QUERY AQUI """

def enviar_relatorio():
    try:
        now_str = datetime.now().strftime('%d/%m/%Y %H:%M')
        filename = f'relatorio_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx'
        email_subject = f'Base Sem Acesso - {now_str}'

        # Conex√£o com Redshift - Altere para o seu banco de Dados
        connection = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASS
        )

        # Executar a query e carregar no DataFrame
        df = pd.read_sql_query(SQL_QUERY, con=connection)

        # Fechar a conex√£o
        connection.close()

        # Salvar em Excel
        df.to_excel(filename, index=False)

        # Enviar e-mail com anexo usando senha de app
        yag = yagmail.SMTP(user=EMAIL_FROM, password=EMAIL_APP_PASSWORD)
        yag.send(to=EMAIL_TO, subject=email_subject, contents=EMAIL_BODY, attachments=filename)

        print(f"‚úÖ Relat√≥rio enviado com sucesso √†s {now_str}!")

    except Exception as e:
        print("‚ùå Erro durante a execu√ß√£o:")
        print(e)

# Agendamentos
schedule.every().day.at("11:00").do(enviar_relatorio)
schedule.every().day.at("16:30").do(enviar_relatorio)

print("üïí Script agendado para rodar diariamente √†s 11:30 e 16:30.")

while True:
    schedule.run_pending()
    time.sleep(30)
